{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../utils.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from \"./schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from \"./auth\";\nimport \"dotenv/config\";\n\nconst {\n  S3_BUCKET_NAME: bucketName,\n  S3_REGION: region,\n  S3_ACCESS_KEY_ID: accessKeyId,\n  S3_SECRET_ACCESS_KEY: secretAccessKey,\n} = process.env;\n\nexport default withAuth(\n  config({\n    server: {\n      cors: { origin: \"*\", credentials: true },\n    },\n    db: {\n      provider: \"postgresql\",\n      url: `postgresql://${process.env.DB_USER}:${process.env.DB_PASSWORD}@ep-billowing-star-a584btzx.us-east-2.aws.neon.tech/delicious-vicious-dev?sslmode=require`,\n    },\n    graphql: {\n      playground: true,\n      apolloConfig: { introspection: true },\n      cors: { origin: \"*\", credentials: true },\n    },\n    lists,\n    session,\n    storage: {\n      delicious_vicious_bucket: {\n        kind: \"s3\",\n        type: \"image\",\n        bucketName: bucketName ? bucketName : \"dev-bucket\",\n        region: region ? region : \"global\",\n        accessKeyId,\n        secretAccessKey,\n        // The S3 links will be signed so they remain private\n        signed: { expiry: 5000 },\n      },\n    },\n  })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  password,\n  timestamp,\n  integer,\n  checkbox,\n  image,\n  select,\n  relationship,\n  json,\n} from \"@keystone-6/core/fields\";\nimport { generatePlaceholder } from \"./utils\";\nimport { KeystoneContext } from \"@keystone-6/core/types\";\n\n// the document field is a more complicated field, so it has it's own package\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\n// import type { Lists } from \".keystone/types\";\n\nexport const lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: \"unique\",\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: \"now\" },\n      }),\n    },\n  }),\n\n  Producto: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our Producto list\n    fields: {\n      nombre: text({ validation: { isRequired: true } }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      descripcion: text({ validation: { isRequired: true } }),\n      precio: integer({\n        validation: { isRequired: true },\n      }),\n      es_visible: checkbox({ defaultValue: true }),\n      imagen: image({ storage: \"delicious_vicious_bucket\" }),\n      imagenPlaceholder: text({}),\n      categoria: relationship({\n        ref: \"Categoria.productos\",\n        ui: {\n          displayMode: \"select\",\n          labelField: \"nombre\",\n        },\n      }),\n    },\n    hooks: {\n      afterOperation: async ({\n        operation,\n        item,\n        context,\n        resolvedData,\n      }: {\n        operation: string;\n        item: any;\n        context: KeystoneContext;\n        resolvedData: any;\n      }) => {\n        if (\n          (operation === \"create\" || operation === \"update\") &&\n          resolvedData?.imagen.id\n        ) {\n          if (item.imagen_id) {\n            const imageContext = context.images(\"delicious_vicious_bucket\");\n            const imageUrl = await imageContext.getUrl(\n              item.imagen_id,\n              item.imagen_extension\n            );\n\n            const placeholder = await generatePlaceholder(imageUrl);\n            await context.query.Producto.updateOne({\n              where: { id: item.id },\n              data: { imagenPlaceholder: placeholder },\n            });\n          }\n        }\n      },\n    },\n  }),\n\n  Categoria: list({\n    access: allowAll,\n    fields: {\n      nombre: text({ validation: { isRequired: true } }),\n      productos: relationship({\n        ref: \"Producto.categoria\",\n        many: true,\n        ui: {\n          labelField: \"nombre\",\n        },\n      }),\n    },\n  }),\n\n  Portada: list({\n    access: allowAll,\n    fields: {\n      nombre: text({ validation: { isRequired: true } }),\n      es_visible: checkbox({ defaultValue: true }),\n      es_vertical: checkbox({ defaultValue: false }),\n      imagen: image({ storage: \"delicious_vicious_bucket\" }),\n    },\n  }),\n\n  Box: list({\n    access: allowAll,\n    fields: {\n      nombre: text({ validation: { isRequired: true } }),\n      size: integer({ validation: { isRequired: true } }),\n      es_visible: checkbox({ defaultValue: true }),\n      imagen: image({ storage: \"delicious_vicious_bucket\" }),\n      orders: relationship({\n        ref: \"Order.box\", // Reference the 'box' field in the Order list\n        many: true, // Box can have many orders\n        ui: {\n          displayMode: \"count\",\n        },\n      }),\n    },\n  }),\n  Order: list({\n    access: allowAll,\n    fields: {\n      nombre: text({\n        validation: { isRequired: true },\n      }),\n      email: text({\n        validation: { isRequired: true },\n      }),\n      telefono: text({\n        validation: { isRequired: true },\n      }),\n      referencia: text(),\n      direccion: text(),\n      google_maps_link: text(),\n      dia_entrega: text(),\n      hora_entrega: text(),\n      tipo_entrega: text({\n        validation: { isRequired: true },\n      }),\n      productos: text({\n        validation: { isRequired: true },\n        ui: {\n          displayMode: \"textarea\",\n        },\n      }),\n      total_orden: integer({\n        validation: { isRequired: true },\n      }),\n      status: select({\n        defaultValue: \"created\",\n        options: [\n          {\n            label: \"Orden creada\",\n            value: \"created\",\n          },\n          {\n            label: \"Orden Pagada\",\n            value: \"paid\",\n          },\n          {\n            label: \"Orden Finalizada\",\n            value: \"finished\",\n          },\n        ],\n      }),\n      box: relationship({\n        ref: \"Box.orders\", // Reference the 'orders' field in the Box list\n        label: \"Tama\u00F1o de la caja\",\n        ui: {\n          displayMode: \"select\",\n          labelField: \"size\",\n        },\n      }),\n    },\n  }),\n  Stock: list({\n    access: allowAll,\n    fields: {\n      actualizado_en: timestamp({\n        defaultValue: { kind: \"now\" },\n        validation: { isRequired: true },\n      }),\n      valido_desde: timestamp({\n        isIndexed: \"unique\",\n        validation: { isRequired: true },\n      }),\n      valido_hasta: timestamp({\n        isIndexed: \"unique\",\n        validation: { isRequired: true },\n      }),\n      es_valido: checkbox({ defaultValue: true }),\n      productos: json(),\n    },\n  }),\n};\n", "import Jimp from \"jimp\";\nimport sharp from \"sharp\";\nimport axios from \"axios\";\n\nexport const generatePlaceholder = async (\n  imageUrl: string\n): Promise<string> => {\n  try {\n    // Fetch the image data from the URL\n    const response = await axios.get(imageUrl, { responseType: \"arraybuffer\" });\n\n    const imageBuffer = Buffer.from(response.data);\n\n    // Use sharp to read and convert the image to a format that Jimp can handle\n    const convertedBuffer = await sharp(imageBuffer)\n      .toFormat(\"jpeg\")\n      .toBuffer();\n\n    // Load the converted image buffer into Jimp\n    const image = await Jimp.read(convertedBuffer);\n\n    // Resize the image to a low resolution for the placeholder\n    image.resize(10, 10);\n\n    // Convert the resized image to a base64-encoded string\n    const base64 = await image.getBase64Async(Jimp.MIME_JPEG);\n\n    return base64;\n  } catch (error) {\n    console.error(\"Error generating placeholder:\", error);\n    throw new Error(\"Failed to generate image placeholder\");\n  }\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "axios", "sharp", "image", "Jimp"]
}
