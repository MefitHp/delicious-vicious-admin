# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Producto {
  id: ID!
  nombre: String
  descripcion: String
  precio: Int
  es_visible: Boolean
  imagen: ImageFieldOutput
  imagenPlaceholder: String
  categoria: Categoria
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProductoWhereUniqueInput {
  id: ID
}

input ProductoWhereInput {
  AND: [ProductoWhereInput!]
  OR: [ProductoWhereInput!]
  NOT: [ProductoWhereInput!]
  id: IDFilter
  nombre: StringFilter
  descripcion: StringFilter
  precio: IntFilter
  es_visible: BooleanFilter
  imagenPlaceholder: StringFilter
  categoria: CategoriaWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ProductoOrderByInput {
  id: OrderDirection
  nombre: OrderDirection
  descripcion: OrderDirection
  precio: OrderDirection
  es_visible: OrderDirection
  imagenPlaceholder: OrderDirection
}

input ProductoUpdateInput {
  nombre: String
  descripcion: String
  precio: Int
  es_visible: Boolean
  imagen: ImageFieldInput
  imagenPlaceholder: String
  categoria: CategoriaRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CategoriaRelateToOneForUpdateInput {
  create: CategoriaCreateInput
  connect: CategoriaWhereUniqueInput
  disconnect: Boolean
}

input ProductoUpdateArgs {
  where: ProductoWhereUniqueInput!
  data: ProductoUpdateInput!
}

input ProductoCreateInput {
  nombre: String
  descripcion: String
  precio: Int
  es_visible: Boolean
  imagen: ImageFieldInput
  imagenPlaceholder: String
  categoria: CategoriaRelateToOneForCreateInput
}

input CategoriaRelateToOneForCreateInput {
  create: CategoriaCreateInput
  connect: CategoriaWhereUniqueInput
}

type Categoria {
  id: ID!
  nombre: String
  productos(where: ProductoWhereInput! = {}, orderBy: [ProductoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductoWhereUniqueInput): [Producto!]
  productosCount(where: ProductoWhereInput! = {}): Int
  se_vende_por_caja: Boolean
}

input CategoriaWhereUniqueInput {
  id: ID
}

input CategoriaWhereInput {
  AND: [CategoriaWhereInput!]
  OR: [CategoriaWhereInput!]
  NOT: [CategoriaWhereInput!]
  id: IDFilter
  nombre: StringFilter
  productos: ProductoManyRelationFilter
  se_vende_por_caja: BooleanFilter
}

input ProductoManyRelationFilter {
  every: ProductoWhereInput
  some: ProductoWhereInput
  none: ProductoWhereInput
}

input CategoriaOrderByInput {
  id: OrderDirection
  nombre: OrderDirection
  se_vende_por_caja: OrderDirection
}

input CategoriaUpdateInput {
  nombre: String
  productos: ProductoRelateToManyForUpdateInput
  se_vende_por_caja: Boolean
}

input ProductoRelateToManyForUpdateInput {
  disconnect: [ProductoWhereUniqueInput!]
  set: [ProductoWhereUniqueInput!]
  create: [ProductoCreateInput!]
  connect: [ProductoWhereUniqueInput!]
}

input CategoriaUpdateArgs {
  where: CategoriaWhereUniqueInput!
  data: CategoriaUpdateInput!
}

input CategoriaCreateInput {
  nombre: String
  productos: ProductoRelateToManyForCreateInput
  se_vende_por_caja: Boolean
}

input ProductoRelateToManyForCreateInput {
  create: [ProductoCreateInput!]
  connect: [ProductoWhereUniqueInput!]
}

type Portada {
  id: ID!
  nombre: String
  es_visible: Boolean
  es_version_movil: Boolean
  imagen: ImageFieldOutput
}

input PortadaWhereUniqueInput {
  id: ID
}

input PortadaWhereInput {
  AND: [PortadaWhereInput!]
  OR: [PortadaWhereInput!]
  NOT: [PortadaWhereInput!]
  id: IDFilter
  nombre: StringFilter
  es_visible: BooleanFilter
  es_version_movil: BooleanFilter
}

input PortadaOrderByInput {
  id: OrderDirection
  nombre: OrderDirection
  es_visible: OrderDirection
  es_version_movil: OrderDirection
}

input PortadaUpdateInput {
  nombre: String
  es_visible: Boolean
  es_version_movil: Boolean
  imagen: ImageFieldInput
}

input PortadaUpdateArgs {
  where: PortadaWhereUniqueInput!
  data: PortadaUpdateInput!
}

input PortadaCreateInput {
  nombre: String
  es_visible: Boolean
  es_version_movil: Boolean
  imagen: ImageFieldInput
}

type Box {
  id: ID!
  nombre: String
  size: Int
  es_visible: Boolean
  imagen: ImageFieldOutput
  categoria: Categoria
  descripcion: String
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
}

input BoxWhereUniqueInput {
  id: ID
}

input BoxWhereInput {
  AND: [BoxWhereInput!]
  OR: [BoxWhereInput!]
  NOT: [BoxWhereInput!]
  id: IDFilter
  nombre: StringFilter
  size: IntFilter
  es_visible: BooleanFilter
  categoria: CategoriaWhereInput
  descripcion: StringFilter
  orders: OrderManyRelationFilter
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input BoxOrderByInput {
  id: OrderDirection
  nombre: OrderDirection
  size: OrderDirection
  es_visible: OrderDirection
  descripcion: OrderDirection
}

input BoxUpdateInput {
  nombre: String
  size: Int
  es_visible: Boolean
  imagen: ImageFieldInput
  categoria: CategoriaRelateToOneForUpdateInput
  descripcion: String
  orders: OrderRelateToManyForUpdateInput
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input BoxUpdateArgs {
  where: BoxWhereUniqueInput!
  data: BoxUpdateInput!
}

input BoxCreateInput {
  nombre: String
  size: Int
  es_visible: Boolean
  imagen: ImageFieldInput
  categoria: CategoriaRelateToOneForCreateInput
  descripcion: String
  orders: OrderRelateToManyForCreateInput
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

type Order {
  id: ID!
  nombre: String
  email: String
  telefono: String
  referencia: String
  direccion: String
  google_maps_link: String
  dia_entrega: String
  hora_entrega: String
  tipo_entrega: String
  productos: String
  total_orden: Int
  status: String
  box: Box
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  nombre: StringFilter
  email: StringFilter
  telefono: StringFilter
  referencia: StringFilter
  direccion: StringFilter
  google_maps_link: StringFilter
  dia_entrega: StringFilter
  hora_entrega: StringFilter
  tipo_entrega: StringFilter
  productos: StringFilter
  total_orden: IntFilter
  status: StringNullableFilter
  box: BoxWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  nombre: OrderDirection
  email: OrderDirection
  telefono: OrderDirection
  referencia: OrderDirection
  direccion: OrderDirection
  google_maps_link: OrderDirection
  dia_entrega: OrderDirection
  hora_entrega: OrderDirection
  tipo_entrega: OrderDirection
  productos: OrderDirection
  total_orden: OrderDirection
  status: OrderDirection
}

input OrderUpdateInput {
  nombre: String
  email: String
  telefono: String
  referencia: String
  direccion: String
  google_maps_link: String
  dia_entrega: String
  hora_entrega: String
  tipo_entrega: String
  productos: String
  total_orden: Int
  status: String
  box: BoxRelateToOneForUpdateInput
}

input BoxRelateToOneForUpdateInput {
  create: BoxCreateInput
  connect: BoxWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  nombre: String
  email: String
  telefono: String
  referencia: String
  direccion: String
  google_maps_link: String
  dia_entrega: String
  hora_entrega: String
  tipo_entrega: String
  productos: String
  total_orden: Int
  status: String
  box: BoxRelateToOneForCreateInput
}

input BoxRelateToOneForCreateInput {
  create: BoxCreateInput
  connect: BoxWhereUniqueInput
}

type Stock {
  id: ID!
  actualizado_en: DateTime
  valido_desde: DateTime
  valido_hasta: DateTime
  es_valido: Boolean
  productos: JSON
}

input StockWhereUniqueInput {
  id: ID
  valido_desde: DateTime
  valido_hasta: DateTime
}

input StockWhereInput {
  AND: [StockWhereInput!]
  OR: [StockWhereInput!]
  NOT: [StockWhereInput!]
  id: IDFilter
  actualizado_en: DateTimeFilter
  valido_desde: DateTimeFilter
  valido_hasta: DateTimeFilter
  es_valido: BooleanFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input StockOrderByInput {
  id: OrderDirection
  actualizado_en: OrderDirection
  valido_desde: OrderDirection
  valido_hasta: OrderDirection
  es_valido: OrderDirection
}

input StockUpdateInput {
  actualizado_en: DateTime
  valido_desde: DateTime
  valido_hasta: DateTime
  es_valido: Boolean
  productos: JSON
}

input StockUpdateArgs {
  where: StockWhereUniqueInput!
  data: StockUpdateInput!
}

input StockCreateInput {
  actualizado_en: DateTime
  valido_desde: DateTime
  valido_hasta: DateTime
  es_valido: Boolean
  productos: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProducto(data: ProductoCreateInput!): Producto
  createProductos(data: [ProductoCreateInput!]!): [Producto]
  updateProducto(where: ProductoWhereUniqueInput!, data: ProductoUpdateInput!): Producto
  updateProductos(data: [ProductoUpdateArgs!]!): [Producto]
  deleteProducto(where: ProductoWhereUniqueInput!): Producto
  deleteProductos(where: [ProductoWhereUniqueInput!]!): [Producto]
  createCategoria(data: CategoriaCreateInput!): Categoria
  createCategorias(data: [CategoriaCreateInput!]!): [Categoria]
  updateCategoria(where: CategoriaWhereUniqueInput!, data: CategoriaUpdateInput!): Categoria
  updateCategorias(data: [CategoriaUpdateArgs!]!): [Categoria]
  deleteCategoria(where: CategoriaWhereUniqueInput!): Categoria
  deleteCategorias(where: [CategoriaWhereUniqueInput!]!): [Categoria]
  createPortada(data: PortadaCreateInput!): Portada
  createPortadas(data: [PortadaCreateInput!]!): [Portada]
  updatePortada(where: PortadaWhereUniqueInput!, data: PortadaUpdateInput!): Portada
  updatePortadas(data: [PortadaUpdateArgs!]!): [Portada]
  deletePortada(where: PortadaWhereUniqueInput!): Portada
  deletePortadas(where: [PortadaWhereUniqueInput!]!): [Portada]
  createBox(data: BoxCreateInput!): Box
  createBoxes(data: [BoxCreateInput!]!): [Box]
  updateBox(where: BoxWhereUniqueInput!, data: BoxUpdateInput!): Box
  updateBoxes(data: [BoxUpdateArgs!]!): [Box]
  deleteBox(where: BoxWhereUniqueInput!): Box
  deleteBoxes(where: [BoxWhereUniqueInput!]!): [Box]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createStock(data: StockCreateInput!): Stock
  createStocks(data: [StockCreateInput!]!): [Stock]
  updateStock(where: StockWhereUniqueInput!, data: StockUpdateInput!): Stock
  updateStocks(data: [StockUpdateArgs!]!): [Stock]
  deleteStock(where: StockWhereUniqueInput!): Stock
  deleteStocks(where: [StockWhereUniqueInput!]!): [Stock]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  productos(where: ProductoWhereInput! = {}, orderBy: [ProductoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductoWhereUniqueInput): [Producto!]
  producto(where: ProductoWhereUniqueInput!): Producto
  productosCount(where: ProductoWhereInput! = {}): Int
  categorias(where: CategoriaWhereInput! = {}, orderBy: [CategoriaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoriaWhereUniqueInput): [Categoria!]
  categoria(where: CategoriaWhereUniqueInput!): Categoria
  categoriasCount(where: CategoriaWhereInput! = {}): Int
  portadas(where: PortadaWhereInput! = {}, orderBy: [PortadaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PortadaWhereUniqueInput): [Portada!]
  portada(where: PortadaWhereUniqueInput!): Portada
  portadasCount(where: PortadaWhereInput! = {}): Int
  boxes(where: BoxWhereInput! = {}, orderBy: [BoxOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BoxWhereUniqueInput): [Box!]
  box(where: BoxWhereUniqueInput!): Box
  boxesCount(where: BoxWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  stocks(where: StockWhereInput! = {}, orderBy: [StockOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockWhereUniqueInput): [Stock!]
  stock(where: StockWhereUniqueInput!): Stock
  stocksCount(where: StockWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
